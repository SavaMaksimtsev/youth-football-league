{\rtf1\ansi\ansicpg1251\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww38200\viewh21600\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #!/bin/bash\
\
echo "\uc0\u1055 \u1088 \u1086 \u1074 \u1077 \u1088 \u1082 \u1072  \u1085 \u1072 \u1083 \u1080 \u1095 \u1080 \u1103  Python..."\
if ! command -v python3 &> /dev/null\
then\
    echo "Python \uc0\u1085 \u1077  \u1091 \u1089 \u1090 \u1072 \u1085 \u1086 \u1074 \u1083 \u1077 \u1085 . \u1055 \u1086 \u1078 \u1072 \u1083 \u1091 \u1081 \u1089 \u1090 \u1072 , \u1091 \u1089 \u1090 \u1072 \u1085 \u1086 \u1074 \u1080 \u1090 \u1077  Python 3."\
    exit\
fi\
\
echo "\uc0\u1055 \u1088 \u1086 \u1074 \u1077 \u1088 \u1082 \u1072  \u1085 \u1072 \u1083 \u1080 \u1095 \u1080 \u1103  pip..."\
if ! command -v pip3 &> /dev/null\
then\
    echo "pip \uc0\u1085 \u1077  \u1091 \u1089 \u1090 \u1072 \u1085 \u1086 \u1074 \u1083 \u1077 \u1085 . \u1055 \u1086 \u1078 \u1072 \u1083 \u1091 \u1081 \u1089 \u1090 \u1072 , \u1091 \u1089 \u1090 \u1072 \u1085 \u1086 \u1074 \u1080 \u1090 \u1077  pip \u1076 \u1083 \u1103  Python 3."\
    exit\
fi\
\
echo "\uc0\u1059 \u1089 \u1090 \u1072 \u1085 \u1086 \u1074 \u1082 \u1072  \u1085 \u1077 \u1086 \u1073 \u1093 \u1086 \u1076 \u1080 \u1084 \u1099 \u1093  \u1073 \u1080 \u1073 \u1083 \u1080 \u1086 \u1090 \u1077 \u1082 ..."\
pip3 install requests beautifulsoup4 pyexcel pyexcel-xlsx\
\
SCRIPT_DIR="$HOME/Desktop/match_parser"\
mkdir -p "$SCRIPT_DIR"\
\
echo "\uc0\u1057 \u1086 \u1093 \u1088 \u1072 \u1085 \u1077 \u1085 \u1080 \u1077  \u1082 \u1086 \u1076 \u1072  \u1074  \u1092 \u1072 \u1081 \u1083 ..."\
cat <<EOL > "$SCRIPT_DIR/match_parser.py"\
import requests\
from bs4 import BeautifulSoup\
import pyexcel as pe\
\
def parse_match_data(url):\
    response = requests.get(url)\
    soup = BeautifulSoup(response.content, 'html.parser')\
    players_data = []\
    players_data.append([' \uc0\u1053 \u1086 \u1084 \u1077 \u1088  ', ' \u1048 \u1084 \u1103  ', ' \u1052 \u1080 \u1085  ', ' \u1057 \u1090 \u1072 \u1088 \u1090  ', ' \u1047 \u1072 \u1084 \u1077 \u1085 \u1072  ', ' \u1043 \u1055  ', ' \u1043 \u1086 \u1083  ', ' \u1046 \u1050  ', ' \u1050 \u1050  '])\
    protocols = soup.find_all('ul', class_='protocol__list')\
    if len(protocols) < 4:\
        print(" \uc0\u1053 \u1077    \u1091 \u1076 \u1072 \u1083 \u1086 \u1089 \u1100    \u1085 \u1072 \u1081 \u1090 \u1080    \u1085 \u1077 \u1086 \u1073 \u1093 \u1086 \u1076 \u1080 \u1084 \u1099 \u1077    \u1073 \u1083 \u1086 \u1082 \u1080    \u1089    \u1076 \u1072 \u1085 \u1085 \u1099 \u1084 \u1080    \u1086    \u1084 \u1072 \u1090 \u1095 \u1077  .")\
        return\
    home_starting = protocols[0]\
    home_substitutes = protocols[2]\
    away_starting = protocols[1]\
    away_substitutes = protocols[3]\
\
    def process_players(protocol, is_starting):\
        for player in protocol.find_all('li', class_='protocol__item'):\
            player_number = player.find('span', class_='protocol__number-text').text.strip() if player.find('span', class_='protocol__number-text') else 'N/A'\
            player_name = player.find('div', class_='protocol__name').text.strip() if player.find('div', class_='protocol__name') else 'N/A'\
            played_minutes = 90 if is_starting else 0\
            goals = 0\
            for event in player.find_all('li', class_='protocol__event', title=' \uc0\u1043 \u1086 \u1083  '):\
                event_number = event.find_next_sibling('li', class_='protocol__event-number')\
                if event_number:\
                    goals += int(event_number.text.strip().replace('x', ''))\
                else:\
                    goals += 1\
            assists = 0\
            for event in player.find_all('li', class_='protocol__event', title=' \uc0\u1040 \u1089 \u1089 \u1080 \u1089 \u1090 \u1077 \u1085 \u1090  '):\
                event_number = event.find_next_sibling('li', class_='protocol__event-number')\
                if event_number:\
                    assists += int(event_number.text.strip().replace('x', ''))\
                else:\
                    assists += 1\
            yellow_card = 1 if player.find('li', class_='protocol__event', title=' \uc0\u1046 \u1077 \u1083 \u1090 \u1072 \u1103    \u1082 \u1072 \u1088 \u1090 \u1086 \u1095 \u1082 \u1072  ') else 0\
            red_card = 1 if player.find('li', class_='protocol__event', title=' \uc0\u1050 \u1088 \u1072 \u1089 \u1085 \u1072 \u1103    \u1082 \u1072 \u1088 \u1090 \u1086 \u1095 \u1082 \u1072  ') else 0\
            sub_in = 0\
            sub_out = 0\
            events = player.find('ul', class_='protocol__events')\
            if events:\
                for event in events.find_all('li', class_='protocol__event'):\
                    if 'protocol__event--out' in event['class']:\
                        played_minutes = int(event.text.strip().replace("'", ""))\
                        sub_out = 1\
                    elif 'protocol__event--in' in event['class']:\
                        played_minutes = 90 - int(event.text.strip().replace("'", ""))\
                        sub_in = 1\
            if sub_out == 1:\
                sub_in = 0\
            players_data.append([player_number, player_name, played_minutes, 1 if is_starting else 0, sub_in, assists, goals, yellow_card, red_card])\
\
    players_data.append([' \uc0\u1061 \u1086 \u1079 \u1103 \u1077 \u1074 \u1072  ', '', '', '', '', '', '', '', ''])\
    process_players(home_starting, True)\
    process_players(home_substitutes, False)\
    players_data.append([''] * 9)\
    players_data.append([''] * 9)\
    players_data.append([''] * 9)\
    players_data.append([' \uc0\u1043 \u1086 \u1089 \u1090 \u1080  ', '', '', '', '', '', '', '', ''])\
    process_players(away_starting, True)\
    process_players(away_substitutes, False)\
    sheet = pe.Sheet(players_data)\
    sheet.save_as('$HOME/Desktop/match_protocol.xlsx')\
\
parse_match_data('https://yflrussia.ru/match/3808937')\
EOL\
\
echo "\uc0\u1047 \u1072 \u1087 \u1091 \u1089 \u1082  \u1089 \u1082 \u1088 \u1080 \u1087 \u1090 \u1072 ..."\
python3 "$SCRIPT_DIR / match_parser.py"\
\
echo "\uc0\u1057 \u1082 \u1088 \u1080 \u1087 \u1090  \u1074 \u1099 \u1087 \u1086 \u1083 \u1085 \u1077 \u1085 . Excel-\u1092 \u1072 \u1081 \u1083  \u1089 \u1086 \u1093 \u1088 \u1072 \u1085 \u1077 \u1085  \u1085 \u1072  \u1088 \u1072 \u1073 \u1086 \u1095 \u1077 \u1084  \u1089 \u1090 \u1086 \u1083 \u1077 ."}